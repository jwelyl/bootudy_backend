<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.bootudy.model.mapper.MemberMapper">
	<!-- 로그인 -->
	<select id="login" parameterType="member" resultMap="MemberMap">
		select member_id, password, email, phone_number, role, join_date, waiting
		from member
		where member_id = #{memberId} and password = #{password}
	</select>
	
	<!-- id로 특정 회원 정보 조회 -->
	<select id="memberInfo" parameterType="string" resultMap="MemberMap">
		select member_id, password, email, phone_number, role, join_date, waiting
		from member
		where member_id = #{memberId}
	</select>
	
	<!-- 특정 부분을 포함하는 id 가진 승인 회원 정보 조회 -->
	<select id="memberWithId" parameterType="string" resultMap="MemberMap">
		select member_id, password, email, phone_number, role, join_date, waiting
		from member
		where  member_id like concat('%', #{memberId}, '%') and waiting = 0
	</select>
	
	<!-- 특정 부분을 포함하는 id 가진 미승인 회원 정보 조회 -->
	<select id="waitingMemberWithId" parameterType="string" resultMap="MemberMap">
		select member_id, password, email, phone_number, role, join_date, waiting
		from member
		where member_id like concat('%', #{memberId}, '%') and waiting = 1
	</select>
	
	<!-- id로 승인된 전체 회원 정보 조회 -->
	<select id="allMembersInfo" resultMap="MemberMap">
		select member_id, email, phone_number, role, join_date
		from member
		where waiting = 0 order by role, member_id asc;
	</select>
	
	<!-- id로 승인 안된 전체 회원 정보 조회 -->
	<select id="waitingMembersInfo" resultMap="MemberMap">
		select member_id, email, phone_number, role, join_date
		from member
		where waiting = 1
	</select>
	
	<!-- 회원 가입 시도 -->
	<insert id="insert" parameterType="member">
		insert into member (member_id, password, email, phone_number)
		values (#{memberId}, #{password}, #{email}, #{phoneNumber});
	</insert>
	
	<!-- 회원정보 수정 -->
	<update id="update" parameterType="member">
		update member set password = #{password}, email=#{email}, phone_number=#{phoneNumber}
		where member_id = #{memberId}
	</update>
	
	<!-- 회원역할 수정 -->
	<update id="updateRole" parameterType="member">
		update member set role=#{role}
		where member_id = #{memberId}
	</update>
	
	<!-- 회원가입 승인 -->
	<update id="approve" parameterType="string">
		update member set waiting = 0
		where member_id = #{memberId}
	</update>
	
	<!-- 회원 삭제 -->
	<delete id="delete" parameterType="string">
		delete from member
		where member_id=#{memberId}
	</delete>
	
	<!-- JWT -->
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from member
		where member_id = #{memberId}
	</select>

	<update id="saveRefreshToken" parameterType="map">
		update member
		set token = #{token}
		where member_id = #{memberId}
	</update>

	<update id="deleteRefreshToken" parameterType="map">
		update member
		set token = #{token, jdbcType=VARCHAR}
		where member_id = #{memberId}
	</update>
	
	<resultMap type="member" id="MemberMap">
		<id column="member_id" property="memberId" />
		<result column="password" property="password" />
		<result column="email" property="email" />
		<result column="phone_number" property="phoneNumber" />
		<result column="role" property="role" />
		<result column="join_date" property="joinDate" />
		<result column="token" property="token" />
	</resultMap>
</mapper>